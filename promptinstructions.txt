# SOCRATIT.AI - FRONTEND DEVELOPMENT INSTRUCTIONS
# PRODUCTION-READY EDUCATIONAL PLATFORM
# Last Updated: 2025-10-29

================================================================================
## CRITICAL: READ THIS FIRST - ERROR PREVENTION PROTOCOLS
================================================================================

**ZERO TOLERANCE FOR ERRORS:**
- ALWAYS read existing files BEFORE editing or creating similar components
- ALWAYS check TypeScript types in `src/types/` BEFORE using them
- ALWAYS verify API endpoints in `src/services/` match backend routes
- ALWAYS test locally after EVERY change
- NEVER assume - always verify file paths, imports, and types
- NEVER create new patterns - follow existing codebase patterns exactly

**BEFORE EVERY CODE CHANGE:**
1. Read the file you're about to modify
2. Read related type definitions in `src/types/`
3. Read the corresponding API service in `src/services/`
4. Understand the existing pattern COMPLETELY
5. Make minimal, surgical changes
6. Test immediately after the change

**TYPE SAFETY IS MANDATORY:**
- Every component must have proper TypeScript types
- No `any` types unless absolutely necessary (document why)
- All props interfaces must be explicit
- All API responses must match backend types exactly
- Use type assertions only when you've verified the shape

================================================================================
## PROJECT OVERVIEW
================================================================================

**What is Socratit.ai?**
Socratit.ai is an enterprise-grade K-12 educational platform with AI-powered features. It provides:
- Teacher tools: Class management, AI-powered quiz generation, year-long curriculum scheduling, advanced analytics
- Student tools: Assignment submission, real-time AI tutor, progress tracking, concept mastery
- Admin tools: School-wide analytics, user management, audit logs

**Production Status:** DEPLOYED
- Frontend: https://socratit-ai.vercel.app (Vercel)
- Backend: https://socratit-ai-production.up.railway.app (Railway)
- Database: PostgreSQL on Railway
- 53,826 lines of production code across frontend and backend

**Your Mission:**
Build pixel-perfect, accessible, performant frontend features that integrate seamlessly with the existing codebase. Follow established patterns, maintain type safety, and create delightful user experiences.

================================================================================
## TECHNOLOGY STACK - MUST USE THESE EXACT VERSIONS
================================================================================

### Frontend Technologies (socratit-wireframes/)
```json
{
  "framework": "React 19.2.0",
  "language": "TypeScript 4.9.5",
  "build": "React Scripts 5.0.1 (Create React App)",
  "routing": "React Router DOM 7.9.4",
  "stateManagement": {
    "server": "TanStack React Query 5.90.5",
    "auth": "React Context API",
    "forms": "React Hook Form 7.65.0"
  },
  "styling": {
    "framework": "Tailwind CSS 3.0.24",
    "utilities": ["PostCSS 8.4.6", "Autoprefixer 10.4.2"]
  },
  "uiLibraries": {
    "icons": "Lucide React 0.546.0",
    "animations": "Framer Motion 12.23.24",
    "calendar": "React Big Calendar 1.19.4",
    "charts": "Recharts 3.3.0",
    "dragDrop": "@dnd-kit (core, sortable, utilities)"
  },
  "http": "Axios 1.12.2",
  "realTime": "Socket.io Client 4.8.1",
  "dates": "date-fns 4.1.0",
  "testing": ["Jest", "@testing-library/react 16.3.0"]
}
```

### Backend API (You don't modify this, but you call it)
```
Base URL: process.env.REACT_APP_API_URL || "http://localhost:3001/api/v1"
API Prefix: /api/v1
Authentication: JWT Bearer tokens (Authorization: Bearer <token>)
Real-time: WebSocket via Socket.io
```

================================================================================
## PROJECT STRUCTURE - KNOW THIS BY HEART
================================================================================

```
socratit-wireframes/
├── src/
│   ├── components/              # Reusable UI components
│   │   ├── ai/                 # AI-related components
│   │   ├── analytics/          # Charts and analytics displays
│   │   ├── class/              # Class management components
│   │   ├── common/             # Reusable UI (Button, Card, Input, Badge)
│   │   ├── curriculum/         # Curriculum scheduling components
│   │   ├── grades/             # Grade displays
│   │   ├── layout/             # Layout components (Sidebar, TopNav)
│   │   ├── progress/           # Progress tracking displays
│   │   ├── shared/             # Shared utilities (Modal, ErrorBoundary)
│   │   └── teacher/            # Teacher-specific components
│   ├── pages/                  # Page components (one per route)
│   │   ├── admin/             # Admin dashboard pages
│   │   ├── public/            # Login, Signup, Landing
│   │   ├── student/           # Student pages
│   │   └── teacher/           # Teacher pages
│   ├── services/              # API integration layer
│   │   ├── api.service.ts            # Base Axios instance
│   │   ├── auth.service.ts           # Authentication API
│   │   ├── class.service.ts          # Class management API
│   │   ├── assignment.service.ts     # Assignment API
│   │   ├── curriculum.service.ts     # Curriculum API
│   │   ├── aiTA.service.ts           # AI tutor API
│   │   ├── analytics.service.ts      # Analytics API
│   │   └── websocket.service.ts      # WebSocket client
│   ├── contexts/              # React Context providers
│   │   └── AuthContext.tsx    # Authentication state
│   ├── hooks/                 # Custom React hooks
│   │   └── useAnalyticsTracking.ts
│   ├── config/                # Configuration files
│   │   ├── api.config.ts      # API endpoints
│   │   ├── curriculum.config.ts
│   │   └── queryClient.ts     # React Query setup
│   ├── types/                 # TypeScript type definitions
│   │   ├── index.ts           # Core types (User, Class, Assignment)
│   │   ├── analytics.types.ts
│   │   ├── curriculum.types.ts
│   │   ├── grade.types.ts
│   │   └── progress.types.ts
│   ├── utils/                 # Utility functions (currently empty)
│   ├── App.tsx                # Main application router
│   ├── index.tsx              # Entry point
│   └── index.css              # Global Tailwind imports
├── public/                    # Static assets
├── package.json               # Dependencies
├── tailwind.config.js         # Tailwind configuration
└── tsconfig.json              # TypeScript configuration
```

**Component Placement Rules:**
1. Reusable components → `components/[feature]/`
2. Page-specific components → Inside the page file or `components/[feature]/`
3. Truly generic components → `components/common/`
4. Layout components → `components/layout/`
5. Modals, popups → `components/shared/`

[REST OF THE FILE CONTENT REMAINS THE SAME AS MY PREVIOUS WRITE ATTEMPT]
