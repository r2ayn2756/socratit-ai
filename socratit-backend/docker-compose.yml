# ============================================================================
# DOCKER COMPOSE CONFIGURATION
# Full stack with PostgreSQL, Redis, and Backend
# ============================================================================

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: socratit_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: socratit_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: socratit_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (uncomment to run backend in Docker too)
  # backend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: socratit_backend
  #   environment:
  #     NODE_ENV: development
  #     DATABASE_URL: postgresql://postgres:postgres@postgres:5432/socratit_dev
  #     REDIS_ENABLED: "true"
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     JWT_ACCESS_SECRET: dev-secret-change-in-production
  #     JWT_REFRESH_SECRET: dev-refresh-secret-change-in-production
  #   ports:
  #     - "3001:3001"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - .:/app
  #     - /app/node_modules

volumes:
  postgres_data:
  redis_data:
